/*
 * Tester.java
 *
 * Created on October 19, 2002, 1:19 PM
 */

package edu.unc.epidoc.transcoder.gui;

import edu.unc.epidoc.transcoder.*;
import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.util.*;

/** This class provides a GUI test interface to the <CODE>Transcoder</CODE>.
 * @author Hugh A. Cayless (hcayless@email.unc.edu)
 */
public class Tester extends javax.swing.JFrame {
    
    /** Creates new form Tester */
    public Tester() {
        initComponents();
        tc = new TransCoder();
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fonts = ge.getAvailableFontFamilyNames();
        fontItems = new ArrayList();
        JMenu menu = jMenuFonts;
        for (int i=0, j=0; i < fonts.length; i++, j++) {
            FontMenuItem fontItem = new Tester.FontMenuItem(fonts[i]);
            fontItems.add(fontItem);
            if (j >= 20) {
                JMenu temp = new JMenu("more");
                menu.add(temp);
                menu = temp;
                j = 0;
            }
            menu.add(fontItem);
        }
        
        String[] parsers = tc.getParsers();
        for (int i=0; i < parsers.length; i++)
            jMenuSource.add(new Tester.EncodingMenuItem(parsers[i]));
        
        String[] converters = tc.getConverters();
        for (int i=0; i < converters.length; i++)
            jMenuResult.add(new Tester.EncodingMenuItem(converters[i]));
        
        for (int i=0; i < fontSizes.length; i++)
            jMenuFontSize.add(new Tester.FontSizeMenuItem(fontSizes[i]));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        clear = new javax.swing.JButton();
        transform = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        conversionArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemSetSource = new javax.swing.JMenuItem();
        jMenuItemSetResult = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEncodings = new javax.swing.JMenu();
        jMenuSource = new javax.swing.JMenu();
        jMenuResult = new javax.swing.JMenu();
        jMenuDisplay = new javax.swing.JMenu();
        jMenuFonts = new javax.swing.JMenu();
        jMenuFontSize = new javax.swing.JMenu();

        setTitle("TransCoder Test Form");
        setFont(new java.awt.Font("Arial", 0, 12));
        setName("testerFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 330, 0, 0);
        jPanel1.add(clear, gridBagConstraints);

        transform.setText("Transform");
        transform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transformActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        jPanel1.add(transform, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 400));
        conversionArea.setColumns(20);
        conversionArea.setRows(100);
        jScrollPane1.setViewportView(conversionArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenuFile.setText("File");
        jMenuItemSetSource.setText("Set Source File...");
        jMenuItemSetSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetSourceActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSetSource);

        jMenuItemSetResult.setText("Set Result File...");
        jMenuItemSetResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetResultActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSetResult);

        jMenuFile.add(jSeparator2);

        jMenuItemOpen.setText("Open...");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemOpen);

        jMenuItemSave.setText("Save...");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setText("Save As...");
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSaveAs);

        jMenuFile.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuEncodings.setText("Encodings");
        jMenuEncodings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEncodingsActionPerformed(evt);
            }
        });

        jMenuSource.setText("Source");
        jMenuSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSourceActionPerformed(evt);
            }
        });

        jMenuEncodings.add(jMenuSource);

        jMenuResult.setText("Result");
        jMenuEncodings.add(jMenuResult);

        jMenuBar1.add(jMenuEncodings);

        jMenuDisplay.setText("Display");
        jMenuFonts.setText("Fonts");
        jMenuDisplay.add(jMenuFonts);

        jMenuFontSize.setText("Font Sizes");
        jMenuDisplay.add(jMenuFontSize);

        jMenuBar1.add(jMenuDisplay);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // Add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // Add your handling code here:
        conversionArea.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        // Add your handling code here:
        try {
            int returnVal = jFileChooser.showOpenDialog(this);
            if (returnVal == jFileChooser.APPROVE_OPTION) {
                String enc = "UTF8";
                if (tc.getParser() != null)
                    enc = tc.getParser().getEncoding();
                InputStreamReader in = new InputStreamReader(
                                            new FileInputStream(jFileChooser.getSelectedFile()), enc);
                StringBuffer text = new StringBuffer();
                while (in.ready())
                    text.append((char)in.read());
                conversionArea.setText(text.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed
    
    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        // Add your handling code here:
        if (saveTo != null) {
            try {
                int returnVal = jFileChooser.showSaveDialog(this);
                if (returnVal == jFileChooser.APPROVE_OPTION) {
                    saveTo = jFileChooser.getSelectedFile();
                    if (!saveTo.exists())
                        saveTo.createNewFile();
                    FileOutputStream fos = new FileOutputStream(saveTo);
                    fos.write(conversionArea.getText().getBytes(tc.getConverter().getEncoding()));
                    fos.flush();
                    fos.close();
                }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else
                jMenuItemSaveAsActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemSaveActionPerformed
        
    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
        // Add your handling code here:
        try {
            int returnVal = jFileChooser.showSaveDialog(this);
            if (returnVal == jFileChooser.APPROVE_OPTION) {
                saveTo = jFileChooser.getSelectedFile();
                if (!saveTo.exists())
                    saveTo.createNewFile();
                FileOutputStream fos = new FileOutputStream(saveTo);
                fos.write(conversionArea.getText().getBytes(tc.getConverter().getEncoding()));
                fos.flush();
                fos.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed
    
    private void jMenuItemSetResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetResultActionPerformed
        // Add your handling code here:
        int returnVal = jFileChooser.showSaveDialog(this);
        if (returnVal == jFileChooser.APPROVE_OPTION)
            result = jFileChooser.getSelectedFile();
    }//GEN-LAST:event_jMenuItemSetResultActionPerformed
    
    private void jMenuItemSetSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetSourceActionPerformed
        // Add your handling code here:
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == jFileChooser.APPROVE_OPTION)
            source = jFileChooser.getSelectedFile();
    }//GEN-LAST:event_jMenuItemSetSourceActionPerformed
    
    private void jMenuSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSourceActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jMenuSourceActionPerformed
    
    private void jMenuEncodingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEncodingsActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jMenuEncodingsActionPerformed
    
    private void transformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transformActionPerformed
        // Add your handling code here:
        try {
            if (source == null && result == null) 
                conversionArea.setText(tc.getString(conversionArea.getText()));
            else {
                if (result != null) {
                    if (!result.exists())
                        result.createNewFile();
                    FileOutputStream fos = new FileOutputStream(result);
                    if (source != null) 
                        tc.write(new FileInputStream(source), fos);
                    else {
                        String s = tc.getString(conversionArea.getText());
                        fos.write(s.getBytes(tc.getConverter().getEncoding()));
                        fos.flush();
                        fos.close();
                        conversionArea.setText(s);
                    }
                } else
                    conversionArea.setText(tc.getString(source));
            }
            
            source = null;
            result = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_transformActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /** The main class, making the <CODE>Tester</CODE> executable.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Tester test = new Tester();
        test.setLocation(100, 100);
        test.show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton transform;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenu jMenuFonts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JTextArea conversionArea;
    private javax.swing.JButton clear;
    private javax.swing.JMenu jMenuDisplay;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenu jMenuEncodings;
    private javax.swing.JMenu jMenuResult;
    private javax.swing.JMenuItem jMenuItemSetResult;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu jMenuSource;
    private javax.swing.JMenuItem jMenuItemSetSource;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuFontSize;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
    private TransCoder tc;
    private ArrayList fontItems;
    private int fontSize = 12;
    private int[] fontSizes = new int[] {10, 12, 14, 16};
    private File source;
    private File result;
    private File saveTo;
    
    private class FontMenuItem extends javax.swing.JMenuItem {
        public FontMenuItem(String name) {
            this.setText(name);
            addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    itemSelected(evt);
                }
            });
        }
        
        private void itemSelected(java.awt.event.ActionEvent evt) {
            for (Iterator itr = fontItems.iterator(); itr.hasNext();) {
                FontMenuItem fmi = (FontMenuItem)itr.next();
                fmi.deselect();
            }
            this.select();
            conversionArea.setFont(new Font(this.getText(), Font.PLAIN, fontSize));
        }
        
        public void select() {
            this.setBackground(Color.darkGray);
            this.setForeground(Color.white);
        }
        
        public void deselect() {
            this.setBackground(Color.lightGray);
            this.setForeground(Color.black);
        }
    }
  
        private class FontSizeMenuItem extends javax.swing.JRadioButtonMenuItem {
        public FontSizeMenuItem(int name) {
            this.setText(Integer.toString(name));
            size = name;
            if (size == fontSize)
                select();
            addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    itemSelected(evt);
                }
            });
        }
        int size;
        
        private void itemSelected(java.awt.event.ActionEvent evt) {
            JPopupMenu parent = (JPopupMenu)getParent();
            Component[] items = parent.getComponents();
            for (int i = 0; i < items.length; i++) {
                FontSizeMenuItem fmi = (FontSizeMenuItem)items[i];
                fmi.deselect();
            }
            this.select();
            fontSize = size;
            conversionArea.setFont(new Font(conversionArea.getFont().getName(), Font.PLAIN, fontSize));
        }
        
        private void select() {
            this.setSelected(true);
        }
        
        private void deselect() {
            this.setSelected(false);
        }
    }
    
    private class EncodingMenuItem extends javax.swing.JRadioButtonMenuItem {
        public EncodingMenuItem(String name) {
            this.setText(name);
            addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    itemSelected(evt);
                }
            });
        }
        
        private void itemSelected(java.awt.event.ActionEvent evt) {
            JPopupMenu parent = (JPopupMenu)getParent();
            Component[] items = parent.getComponents();
            for (int i = 0; i < items.length; i++) {
                EncodingMenuItem emi = (EncodingMenuItem)items[i];
                emi.deselect();
            }
            this.select();
            try {
                if (parent.getInvoker().equals(jMenuSource))
                    tc.setParser(this.getText());
                if (parent.getInvoker().equals(jMenuResult))
                    tc.setConverter(this.getText());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
        private void select() {
            this.setSelected(true);
        }
        
        private void deselect() {
            this.setSelected(false);
        }
    }
    }
